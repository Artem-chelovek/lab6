#include <iostream> // подключаем библиотеку ввода-вывода

using namespace std; // используем пространство имен стандартной библиотеки

// Объявляем функцию выбора минимальной позиции элемента массива
void selectMin(int arr[], int startIndex, int n) {
    int minIndex = startIndex; // инициализируем индекс минимального элемента первым элементом диапазона
    
    for (int i = startIndex + 1; i < n; ++i) { // начинаем перебор элементов начиная со следующего индекса
        if (arr[i] < arr[minIndex]) { // сравниваем текущий элемент с минимальным найденным ранее
            minIndex = i; // обновляем минимальный индекс, если нашли меньший элемент
        }
    }

    swap(arr[startIndex], arr[minIndex]); // меняем местами первый элемент рассматриваемого диапазона с минимальным
}

// Основная функция сортировки выборкой
void selectionSort(int arr[], int size) {
    for (int i = 0; i < size - 1; ++i) { // проход по массиву от начала до предпоследнего элемента
        selectMin(arr, i, size); // применяем метод выбора минимума на оставшейся части массива
    }
}

// Функция вывода содержимого массива
void printArray(const int arr[], int size) {
    
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << ' '; // вывод каждого элемента массива
    }
    cout << endl; // новая строка после завершения вывода
}

int main() {
    const int SIZE = 8; // объявляем размер массива константой
    int myArr[] = {64, 25, 12, 22, 11, 90, 5, 3};
    cout<<"Исходный массив: "; // исходный несортированный массив
    printArray(myArr, SIZE);
    cout << "Отсортированный массив: ";
    selectionSort(myArr, SIZE); // сортируем массив методом сортировки выбором
    
    printArray(myArr, SIZE); // выводим отсортированный массив на экран

    return 0; // успешное завершение программы
}
/*
Исходный массив: 64 25 12 22 11 90 5 3 
Отсортированный массив: 3 5 11 12 22 25 64 90 
*/